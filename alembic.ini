# Alembic Configuration File
# This file tells Alembic how to manage database migrations (changes to your database structure)

[alembic]
# Where to find migration scripts (the folder containing your database change files)
script_location = migrations

# How to name migration files - includes date, time, and description
# Example result: 2024_01_15_1430-abc123_create_users_table
file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s

# Add current directory to Python path so imports work properly
prepend_sys_path = .

# What timezone to use when creating migration files
timezone = UTC

# Maximum length for the descriptive part of migration filename
# Longer descriptions get cut off at this length
truncate_slug_length = 40

# Whether to run environment setup during migration creation
# Usually false for better performance
revision_environment = false

# Allow compiled Python files (.pyc) to be treated as migrations
# Usually false to avoid confusion
sourceless = false

# How to separate multiple version locations (if you have them)
# "os" means use your operating system's default separator
version_path_separator = os

# Search for migrations in subdirectories too
# Usually false to keep things simple
recursive_version_locations = false

# Text encoding for migration files
# UTF-8 supports international characters
output_encoding = utf-8

# Database connection URL - this gets overridden by env.py from environment variables
# Never put real passwords here - use .env file instead
sqlalchemy.url = driver://user:pass@localhost/dbname

# Post-processing hooks - what to do after creating migration files
[post_write_hooks]
# Format code with Black formatter to keep it clean and consistent
hooks = black
black.type = console_scripts
black.entrypoint = black
black.options = -l 79 REVISION_SCRIPT_FILENAME

# Optional: Use Ruff linter to check for code issues
# ruff.type = exec
# ruff.executable = %(here)s/.venv/bin/ruff
# ruff.options = --fix REVISION_SCRIPT_FILENAME

# Logging Configuration - controls what information gets printed during migrations
# WARNING: No inline comments allowed in the logging sections below!

[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

# Root logger - catches all messages not handled elsewhere
# Only show warnings and errors
[logger_root]
level = WARN
handlers = console
qualname =

# SQLAlchemy logger - database-related messages
# Only show warnings and errors from database operations
[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

# Alembic logger - migration-related messages
# Show informational messages about migrations
[logger_alembic]
level = INFO
handlers =
qualname = alembic

# Console handler - where to display log messages
# Print to terminal/console using error output stream
# Don't filter messages at this level
[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

# Log message formatter - how to display messages
# Format example: "INFO  [alembic] Migration complete"
# Time format: 14:30:15
[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S