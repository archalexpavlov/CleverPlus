# üê≥ AI Agent Platform - Infrastructure Services
# Required: Docker Swarm mode (docker swarm init)
# Deploy with: docker stack deploy -c docker-compose.yml clever

services:
  # üóÑÔ∏è PostgreSQL - Primary Database
  postgres:
    image: postgres:15-alpine
    container_name: clever_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: clever_db
      # Use admin user as database owner
      POSTGRES_PASSWORD_FILE: /run/secrets/db_admin_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Mount SQL scripts for user initialization
      - ./tools/database:/docker-entrypoint-initdb.d
    networks:
      - clever_network
    secrets:
      - db_admin_password
      - db_app_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin_user -d clever_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ‚ö° Redis - Caching & Session Storage
  redis:
    image: redis:7-alpine
    container_name: clever_redis
    restart: unless-stopped
    command: >
      sh -c "redis-server --requirepass $$(cat /run/secrets/redis_password) \
        --maxmemory 512mb \
        --maxmemory-policy allkeys-lru \
        --save 60 1000 \
        --appendonly yes"
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - clever_network
    secrets:
      - redis_password
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a $(cat /run/secrets/redis_password) ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # üß† Qdrant - Vector Database for Semantic Search
  qdrant:
    image: qdrant/qdrant:v1.12.0
    container_name: clever_qdrant
    restart: unless-stopped
    environment:
      QDRANT__SERVICE__API_KEY: ${QDRANT_API_KEY}
    ports:
      - "6333:6333"  # HTTP API
      - "6334:6334"  # gRPC API (optional)
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - clever_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 15s
      timeout: 10s
      retries: 3

  # üìä Jaeger - Distributed Tracing (Optional for Development)
  jaeger:
    image: jaegertracing/all-in-one:1.60
    container_name: clever_jaeger
    restart: unless-stopped
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
      COLLECTOR_ZIPKIN_HOST_PORT: ":9411"
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
      - "4317:4317"    # OTLP gRPC receiver
      - "4318:4318"    # OTLP HTTP receiver
    networks:
      - clever_network
    profiles:
      - monitoring

  # üìà Prometheus - Metrics Collection (Optional for Development)
  prometheus:
    image: prom/prometheus:v2.54.0
    container_name: clever_prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
    networks:
      - clever_network
    profiles:
      - monitoring

  # üìä Grafana - Metrics Visualization (Optional for Development)
  grafana:
    image: grafana/grafana:11.2.0
    container_name: clever_grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD__FILE: /run/secrets/grafana_admin_password
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - clever_network
    secrets:
      - grafana_admin_password
    profiles:
      - monitoring
    depends_on:
      - prometheus

# üîê Docker Secrets - Secure password management
secrets:
  db_admin_password:
    file: secrets/db_admin_password
  db_app_password:
    file: secrets/db_app_password
  redis_password:
    file: secrets/redis_password
  grafana_admin_password:
    file: secrets/grafana_admin_password
    
# üíæ Persistent Storage Volumes
volumes:
  postgres_data:
    name: clever_postgres_data
  redis_data:
    name: clever_redis_data
  qdrant_data:
    name: clever_qdrant_data
  prometheus_data:
    name: clever_prometheus_data
  grafana_data:
    name: clever_grafana_data 

# üåê Networks
networks:
  clever_network:
    name: clever_network
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16